geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill = "Diagnosis") +
theme_void()
View(y.freq)
View(y.freq)
# Create a data frame from the frequency counts
y.freq <- data.frame(y.names = names(table(brca$y)), count = table(brca$y))
# Create the pie chart using ggplot2
ggplot(y.freq, aes(x = "", y = count.Freq, fill = y.names)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill = "Diagnosis") +
theme_void()
# Create a data frame from the frequency counts
y.freq <- data.frame(y.names = names(table(brca$y)), count = table(brca$y))
# Create the pie chart using ggplot2
ggplot(y.freq, aes(x = "", y = count.Freq, fill = y.names)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill = "Diagnosis") +
theme_void() +
geom_label(stat = "count", aes(label = ..count..), position = position_stack(vjust = 0.5),
size = 5, show.legend = FALSE)
# Create a data frame from the frequency counts
y.freq <- data.frame(y.names = names(table(brca$y)), count = table(brca$y))
# Create the pie chart using ggplot2
ggplot(y.freq, aes(x = "", y = count.Freq, fill = y.names)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill = "Diagnosis") +
theme_void()
# Create a data frame from the frequency counts
y.freq <- data.frame(y.names = names(table(brca$y)), count = table(brca$y))
# Create the pie chart using ggplot2
ggplot(y.freq, aes(x = "", y = count.Freq, fill = y.names)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill = "Diagnosis") +
theme_void() +
geom_text(aes(label = paste0(percentage, "%")), position = position_stack(vjust = 0.5))
# Create a data frame from the frequency counts
y.freq <- data.frame(y.names = names(table(brca$y)), count = table(brca$y))
# Create the pie chart using ggplot2
ggplot(y.freq, aes(x = "", y = count.Freq, fill = y.names)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(fill = "Diagnosis") +
theme_void() +
geom_text(aes(label = count.Freq), position = position_stack(vjust = 0.5))
measures.groups <- c("_mean", "_se", "_worst")
cor(brca[,-(ncol(brca))]) %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
install.packages("GGally")
#install.packages("GGally")
library(GGally)
measures.groups <- c("_mean", "_se", "_worst")
ggcorr(brca, method = c("pairwise", "pearson"),
nbreaks = NULL, digits = 2, low = "#3B9AB2",
mid = "#EEEEEE", high = "#F21A00",
geom = "tile", label = FALSE,
label_alpha = FALSE
measures.groups <- c("_mean", "_se", "_worst")
ggcorr(brca, method = c("pairwise", "pearson"),
nbreaks = NULL, digits = 2, low = "#3B9AB2",
mid = "#EEEEEE", high = "#F21A00",
geom = "tile", label = FALSE,
label_alpha = FALSE)
#install.packages("GGally")
install.packages("corrplot")
library(corrplot)
library(GGally)
#install.packages("GGally")
#install.packages("corrplot")
library(corrplot)
library(GGally)
measures.groups <- c("_mean", "_se", "_worst")
cor(brca[,-(ncol(brca))]) %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
cor(brca[,-(ncol(brca))] , method = "spearman") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
# Calculate the correlation matrix
cor_matrix <- cor(brca, method = "spearman")
# Calculate the correlation matrix
cor_matrix <- cor([,-(ncol(brca))], method = "spearman")
# Calculate the correlation matrix
cor_matrix <- cor(brca[,-(ncol(brca))] , method = "spearman")
# Find column pairs with correlation higher than 0.9
high_corr_pairs <- which(upper.tri(cor_matrix, diag = TRUE) & abs(cor_matrix) > 0.9, arr.ind = TRUE)
# Remove one of the columns from each high correlation pair
to_remove <- c()
for (i in 1:nrow(high_corr_pairs)) {
col1 <- high_corr_pairs[i, 1]
col2 <- high_corr_pairs[i, 2]
if (!(col1 %in% to_remove)) {
to_remove <- c(to_remove, col2)
}
}
# Remove the columns from the brca dataframe
brca_filtered <- brca[, -to_remove]
str(brca_filtered)
# Calculate the correlation matrix
cor_matrix <- cor(brca[,-(ncol(brca))] , method = "spearman")
# Find column pairs with correlation higher than 0.9
high_corr_pairs <- which(upper.tri(cor_matrix, diag = False) & abs(cor_matrix) > 0.9, arr.ind = TRUE)
# Calculate the correlation matrix
cor_matrix <- cor(brca[,-(ncol(brca))] , method = "spearman")
# Find column pairs with correlation higher than 0.9
high_corr_pairs <- which(upper.tri(cor_matrix, diag = 1) & abs(cor_matrix) > 0.9, arr.ind = TRUE)
# Remove one of the columns from each high correlation pair
to_remove <- c()
for (i in 1:nrow(high_corr_pairs)) {
col1 <- high_corr_pairs[i, 1]
col2 <- high_corr_pairs[i, 2]
if (!(col1 %in% to_remove)) {
to_remove <- c(to_remove, col2)
}
}
# Remove the columns from the brca dataframe
brca_filtered <- brca[, -to_remove]
str(brca_filtered)
# Calculate the correlation matrix
cor_matrix <- cor(brca[,-(ncol(brca))] , method = "spearman")
# Find column pairs with correlation higher than 0.9
high_corr_pairs <- which(upper.tri(cor_matrix) & abs(cor_matrix) > 0.9, arr.ind = TRUE)
# Remove one of the columns from each high correlation pair
to_remove <- c()
for (i in 1:nrow(high_corr_pairs)) {
col1 <- high_corr_pairs[i, 1]
col2 <- high_corr_pairs[i, 2]
if (!(col1 %in% to_remove)) {
to_remove <- c(to_remove, col2)
}
}
# Remove the columns from the brca dataframe
brca_filtered <- brca[, -to_remove]
str(brca_filtered)
cor(brca_filtered[,-(ncol(brca))] , method = "spearman") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
cor(brca_filtered[,-(ncol(brca_filtered))] , method = "spearman") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
# Calculate the correlation matrix
cor_matrix <- cor(brca[,-(ncol(brca))] , method = "spearman")
# Find column pairs with correlation higher than 0.9
high_corr_pairs <- which(upper.tri(cor_matrix) & abs(cor_matrix) > 0.8, arr.ind = TRUE)
# Remove one of the columns from each high correlation pair
to_remove <- c()
for (i in 1:nrow(high_corr_pairs)) {
col1 <- high_corr_pairs[i, 1]
col2 <- high_corr_pairs[i, 2]
if (!(col1 %in% to_remove)) {
to_remove <- c(to_remove, col2)
}
}
# Remove the columns from the brca dataframe
brca_filtered <- brca[, -to_remove]
str(brca_filtered)
cor(brca_filtered[,-(ncol(brca_filtered))] , method = "spearman") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
# Calculate the correlation matrix
cor_matrix <- cor(brca[,-(ncol(brca))] , method = "spearman")
# Find column pairs with correlation higher than 0.9
high_corr_pairs <- which(upper.tri(cor_matrix) & abs(cor_matrix) > 0.8, arr.ind = TRUE)
# Remove one of the columns from each high correlation pair
to_remove <- c()
for (i in 1:nrow(high_corr_pairs)) {
col1 <- high_corr_pairs[i, 1]
col2 <- high_corr_pairs[i, 2]
if (!(col1 %in% to_remove)) {
to_remove <- c(to_remove, col2)
}
}
# Remove the columns from the brca dataframe
brca.noncorr <- brca[, -to_remove]
colnames(brca.noncorr)
cor(brca[,-(ncol(brca))] , method = "spearman") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
# Calculate the correlation matrix
cor_matrix <- cor(brca[,-(ncol(brca))] , method = "spearman")
# Find column pairs with correlation higher than 0.9
high_corr_pairs <- which(upper.tri(cor_matrix) & abs(cor_matrix) > 0.8, arr.ind = TRUE)
# Remove one of the columns from each high correlation pair
to_remove <- c()
for (i in 1:nrow(high_corr_pairs)) {
col1 <- high_corr_pairs[i, 1]
col2 <- high_corr_pairs[i, 2]
if (!(col1 %in% to_remove)) {
to_remove <- c(to_remove, col2)
}
}
# Remove the columns from the brca dataframe
brca.noncorr <- brca[, -to_remove]
colnames(brca.noncorr)
cor(brca.noncorr[,-(ncol(brca.noncorr))] , method = "spearman") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
# Find column names that start with the current prefix
cat("--------", prefix, "--------\n")
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.z <- paste0(prefix, "_z")
# Print the result
brca[[prefix.z]] <- (brca[[prefix.worst]] - brca[[prefix.mean]]) / brca[[prefix.se]]
}
summary(brca)
colnames(brca)
hist(brca$radius_worst)
colnames(brca)
hist(brca$radius_z)
colnames(brca)
hist(brca$radius_z)
hist(brca$radius_worst)
cor(brca[,-(ncol(brca))] , method = "spearman") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
cor(brca[,!(colnames(original_df) %in% c("y"))] , method = "spearman") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
cor(brca[,!(colnames(brca) %in% c("y"))] , method = "spearman") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
cor(brca[,!(colnames(brca) %in% c("y"))] , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
colnames(brca)
hist(brca$connactivity_z)
hist(brca$concavity_z)
hist(brca$radius_worst)
count(brca$concavity_z == 0)
count(brca$concavity_z = 0)
count(brca$concavity_z)
brca$concavity_z.count
hist(brca$radius_worst)
summary(brca$concavity_z)
hist(brca$radius_worst)
summary(brca$concavity_se)
hist(brca$radius_worst)
summary(brca$concavity_se)
hist(brca$radius_worst)
brca[brca$concavity_se == 0,]
gc()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(dplyr)
#install.packages("GGally")
#install.packages("corrplot")
library(corrplot)
library(GGally)
brca <-read.csv("data//brca.csv")
# remove the prefix "x." from column names
colnames(brca) <- gsub("^x\\.", "", colnames(brca))
# remove id column
brca<-brca[,-1]
# factorize the label
brca <- brca %>% mutate(y = if_else(y == "B", "Benign", "Malignant"))
brca$y <- as.factor(brca$y)
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
# Find column names that start with the current prefix
cat("--------", prefix, "--------\n")
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
# Print the result
cat("Mean:\t\t\t", range(brca[[prefix.mean]]), "\n")
cat("Standard error:\t\t", range(brca[[prefix.se]]), "\n")
cat("Worst:\t\t\t", range(brca[[prefix.worst]]), "\n")}
#check Nas
print(paste("number of NAs in dataset:",sum(is.na(brca))))
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
# Find column names that start with the current prefix
cat("--------", prefix, "--------\n")
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.z <- paste0(prefix, "_z")
# Print the result
brca[[prefix.z]] <- (brca[[prefix.worst]] - brca[[prefix.mean]]) / brca[[prefix.se]]
}
brca[brca$concavity_se == 0,]
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
# Find column names that start with the current prefix
cat("--------", prefix, "--------\n")
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.z <- paste0(prefix, "_z")
# Print the result
brca[[prefix.z]] <- (brca[[prefix.worst]] - brca[[prefix.mean]]) / brca[[prefix.se]]
brca[[prefix.z]][brca[[prefix.se]] == 0] <- 0
}
summary(brca$concavity_se)
hist(brca$radius_worst)
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
# Find column names that start with the current prefix
cat("--------", prefix, "--------\n")
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.z <- paste0(prefix, "_z")
# Print the result
brca[[prefix.z]] <- (brca[[prefix.worst]] - brca[[prefix.mean]]) / brca[[prefix.se]]
#brca[[prefix.z]][brca[[prefix.se]] == 0] <- 0
}
summary(brca$concavity_se)
hist(brca$radius_worst)
is.na(brca)
sum(is.na(brca))
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
# Find column names that start with the current prefix
cat("--------", prefix, "--------\n")
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.z <- paste0(prefix, "_z")
# Print the result
brca[[prefix.z]] <- (brca[[prefix.worst]] - brca[[prefix.mean]]) / brca[[prefix.se]]
brca[[prefix.z]][brca[[prefix.se]] == 0] <- 0
}
sum(is.na(brca))
cor(brca[,!(colnames(brca) %in% c("y"))] , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
set.seed(1)  # Set seed for reproducibility
n <- 100  # Number of data points
X <- runif(n, 1, 10)  # Generate random values for X between 1 and 10
X_inverse <- 1/X  # Calculate the inverse of X
# Calculate the correlation
correlation <- cor(X, X_inverse)
# Print the correlation
print(correlation)
set.seed(1)  # Set seed for reproducibility
n <- 100  # Number of data points
X <- runif(n, 1, 10)  # Generate random values for X between 1 and 10
X_inverse <- 1-X  # Calculate the inverse of X
# Calculate the correlation
correlation <- cor(X, X_inverse)
# Print the correlation
print(correlation)
set.seed(1)  # Set seed for reproducibility
n <- 100  # Number of data points
X <- runif(n, 1, 10)  # Generate random values for X between 1 and 10
X_inverse <- 1/X  # Calculate the inverse of X
# Calculate the correlation
correlation <- cor(X, X_inverse)
# Print the correlation
print(correlation)
summary(brca)
cor(brca[,!(colnames(brca) %in% c("y"))] , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
types <- c(prefix.mean, prefix.se, prefix.worst)
mini <-  brca[,types]
cor(mini[,!(colnames(mini) %in% c("y"))] , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
types <- c(prefix.mean, prefix.se, prefix.worst)
mini <-  brca[,types]
cor(mini[,!(colnames(mini) %in% c("y"))] , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
}
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.worst <- paste0(prefix, "_z")
types <- c(prefix.mean, prefix.se, prefix.worst)
mini <-  brca[,types]
cor(mini[,!(colnames(mini) %in% c("y"))] , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
}
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.z <- paste0(prefix, "_z")
types <- c(prefix.mean, prefix.se, prefix.worst)
mini <-  brca[,types]
cor(mini[,!(colnames(mini) %in% c("y"))] , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
}
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.z <- paste0(prefix, "_z")
types <- c(prefix.mean, prefix.se, prefix.worst,  prefix.z)
mini <-  brca[,types]
cor(mini[,!(colnames(mini) %in% c("y"))] , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
}
pi
hist(brca$radius_mean * 2 * pi / brca$primeter_mean)
hist(brca$radius_mean / brca$primeter_mean)
hist((brca$radius_mean / brca$primeter_mean))
hist((brca$radius_mean / brca$perimeter_mean))
hist((brca$radius_mean * 2 * pi / brca$perimeter_mean))
hist((brca$radius_mean * 2 * pi) / (brca$perimeter_mean))
hist((brca$radius_mean * 2 * pi) / (brca$perimeter_mean))
hist(brca$perimeter_mean)
hist((brca$radius_mean * 2 * pi) / (brca$perimeter_mean) / ((brca$radius_se) / (brca$perimeter_se))
hist(brca$perimeter_mean)
hist((brca$radius_mean * 2 * pi) / (brca$perimeter_mean) / ((brca$radius_se) / (brca$perimeter_se)))
hist(brca$perimeter_mean)
hist((brca$radius_mean * 2 * pi) / (brca$perimeter_mean) - ((brca$radius_se) / (brca$perimeter_se)))
hist(brca$perimeter_mean)
hist((brca$radius_mean * 2 * pi) / (brca$perimeter_mean) * ((brca$radius_se) / (brca$perimeter_se)))
hist(brca$perimeter_mean)
hist((brca$radius_mean * 2 * pi) / (brca$perimeter_mean) / ((brca$radius_se) / (brca$perimeter_se)))
hist(brca$perimeter_mean)
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.z <- paste0(prefix, "_z")
types <- c(prefix.mean, prefix.se, prefix.worst,  prefix.z)
mini <-  brca[,types]
cor(mini , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
#prcomp_cereals_num <- prcomp(cereals_num[, 1:10])
}
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.z <- paste0(prefix, "_z")
types <- c(prefix.mean, prefix.se, prefix.worst,  prefix.z)
mini <-  brca[,types]
cor(mini , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
pcs <- prcomp(brca)
}
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
prefix.z <- paste0(prefix, "_z")
types <- c(prefix.mean, prefix.se, prefix.worst,  prefix.z)
mini <-  brca[,types]
cor(mini , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
pcs <- prcomp(mini)
}
measures <- c("radius", "texture", "perimeter", "area", "smoothness", "compactness", "concavity", "concave_pts", "symmetry", "fractal_dim")
cat("range of values in the columns: \n")
for (prefix in measures) {
prefix.mean <- paste0(prefix, "_mean")
prefix.se <- paste0(prefix, "_se")
prefix.worst <- paste0(prefix, "_worst")
types <- c(prefix.mean, prefix.se, prefix.worst)
mini <-  brca[,types]
cor(mini , method = "pearson") %>%
corrplot(method = "square", tl.col = "black", tl.srt = 45,
sig.level = 0.05)
pcs <- prcomp(mini)
}
View(pcs)
pcs[["rotation"]]
pcs[["sdev"]]
View(mini)
